import { type Check } from "drizzle-orm/gel-core/checks";
import type { AnyGelColumn } from "drizzle-orm/gel-core/columns";
import { type ForeignKey } from "drizzle-orm/gel-core/foreign-keys";
import type { Index } from "drizzle-orm/gel-core/indexes";
import { GelPolicy } from "drizzle-orm/gel-core/policies";
import { type PrimaryKey } from "drizzle-orm/gel-core/primary-keys";
import { GelTable } from "drizzle-orm/gel-core/table";
import { type UniqueConstraint } from "drizzle-orm/gel-core/unique-constraint";
import { type GelMaterializedView, type GelView } from "drizzle-orm/gel-core/view";
export declare function getTableConfig<TTable extends GelTable>(table: TTable): {
    columns: import("drizzle-orm/gel-core").GelColumn<import("drizzle-orm/column").ColumnBaseConfig<import("drizzle-orm/column-builder").ColumnDataType, string>, {}, {}>[];
    indexes: Index[];
    foreignKeys: ForeignKey[];
    checks: Check[];
    primaryKeys: PrimaryKey[];
    uniqueConstraints: UniqueConstraint[];
    name: string;
    schema: string | undefined;
    policies: GelPolicy[];
    enableRLS: boolean;
};
export declare function getViewConfig<TName extends string = string, TExisting extends boolean = boolean>(view: GelView<TName, TExisting>): {
    with?: import("drizzle-orm/gel-core/view").ViewWithConfig;
    name: TName;
    originalName: TName;
    schema: string | undefined;
    selectedFields: import("drizzle-orm").ColumnsSelection;
    isExisting: TExisting;
    query: TExisting extends true ? undefined : import("drizzle-orm").SQL<unknown>;
    isAlias: boolean;
};
export declare function getMaterializedViewConfig<TName extends string = string, TExisting extends boolean = boolean>(view: GelMaterializedView<TName, TExisting>): {
    with?: import("drizzle-orm/gel-core/view").GelMaterializedViewWithConfig;
    using?: string;
    tablespace?: string;
    withNoData?: boolean;
    name: TName;
    originalName: TName;
    schema: string | undefined;
    selectedFields: import("drizzle-orm").ColumnsSelection;
    isExisting: TExisting;
    query: TExisting extends true ? undefined : import("drizzle-orm").SQL<unknown>;
    isAlias: boolean;
};
export type ColumnsWithTable<TTableName extends string, TForeignTableName extends string, TColumns extends AnyGelColumn<{
    tableName: TTableName;
}>[]> = {
    [Key in keyof TColumns]: AnyGelColumn<{
        tableName: TForeignTableName;
    }>;
};
